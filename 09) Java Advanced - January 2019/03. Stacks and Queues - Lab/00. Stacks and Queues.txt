Stacks and Queues

Classes:
ArrayDeque<T>
https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html
Initial size 16 || 8

=============================================================
Stack LIFO
// Head
// push, >>offerFirst<<, >>addFirst<<
// pop, remove, poll, >>pollFirst<<, >>removeFirst<<

## Pushing
# addFirst(T), if T is not null   (push)
# offerFirst(T), returns true if the element T was added. If the deque is full it will be false. ArrayDequeue manages the size itself

.addFirst(1);
[0] |[1]|

.offerFirst(2); // returns true
[0] |[2]|
[1] |[1]|

.addFirst(3);
[0] |[3]|
[1] |[2]|
[2] |[1]|


## Popping
# pollFirst(), null OR element T                    (poll)
# removeFirst(), uses pollFirst(), throws if null   (pop, remove)

.pollFirst() // 3
[0] |[2]|
[1] |[1]|

.removeFirst(); // 2
[0] |[1]|

.removeFirst(); // 1
emtpy

.pollFirst(); // null
.removeFirst(); // Exception - NoSuchElementException
=============================================================
Queue LIFO
// Tail
// add, offer, >>offerLast<<, >>addLast<<
// pollLast, removeLast

## Shifting
# addLast(T), throws if T is null                          (add)
# offerLast(T), uses addLast(), returns true or false      (offer)

.addLast(1);
[0] |[1]|

.addLast(2);
[0] |[1]|
[1] |[2]|

.addLast(3);
[0] |[1]|
[1] |[2]|
[2] |[3]|

## Unshifting
# pollLast(), null or element T
# removeLast(), element T, throws if null

.pollLast(); // 3
[0] |[1]|
[1] |[2]|

.removeLast(); // 2
[0] |[1]|

.pollLast(); // 1
empty

.pollLast(); // null
empty

.removeLast(); // Exception
=============================================================